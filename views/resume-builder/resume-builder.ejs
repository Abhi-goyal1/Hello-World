<% layout("/layouts/boilerplate") %>


    <style>
      :root {
        --primary-color: #4a90e2;
        --secondary-color: #f4f4f4;
        --text-color: #333;
        --border-color: #ddd;
      }
    
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
    
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: var(--text-color);
        background-color: var(--secondary-color);
      }
    
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        display: flex;
        flex-wrap: wrap;
      }
    
      .editor {
        flex: 1;
        min-width: 300px;
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-right: 20px;
      }
    
      .preview {
        flex: 1;
        min-width: 300px;
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
      }
    
      h1, h2, h3 {
        margin-bottom: 20px;
      }
    
      .form-group {
        margin-bottom: 20px;
      }
    
      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }
    
      input[type="text"],
      input[type="email"],
      textarea,
      select {
        width: 100%;
        padding: 10px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        font-size: 16px;
      }
    
      button {
        background-color: var(--primary-color);
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
      }
    
      button:hover {
        background-color: #3a7bc8;
      }
    
      .section {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        position: relative;
      }
    
      .section h3 {
        border-bottom: 2px solid var(--primary-color);
        padding-bottom: 5px;
      }
    
      .editable {
        min-height: 20px;
        padding: 5px;
        border: 1px dashed transparent;
        transition: border-color 0.3s ease;
      }
    
      .editable:hover {
        border-color: var(--primary-color);
      }
    
      .editable:focus {
        outline: none;
        border-color: var(--primary-color);
        background-color: #f0f8ff;
      }
    
      .template-selector {
        margin-bottom: 20px;
      }
    
      .template-preview {
        width: 100px;
        height: 150px;
        margin-right: 10px;
        cursor: pointer;
        border: 2px solid transparent;
      }
    
      .template-preview.selected {
        border-color: var(--primary-color);
      }
    
      #resumePreview {
        min-height: 800px;
        position: relative;
        border: 1px solid var(--border-color);
        padding: 20px;
      }
    
      .preview-section {
        position: absolute;
        width: 100%;
        padding: 10px;
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px dashed var(--border-color);
      }
    
      .drag-handle {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 20px;
        height: 20px;
        background-color: var(--primary-color);
        color: white;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: move;
        font-weight: bold;
      }
    
      .drag-over {
        border: 2px dashed var(--primary-color);
      }
    
      .dragging {
        opacity: 0.5;
      }
    
      @media print {
        .editor, .no-print {
          display: none;
        }
        .preview {
          box-shadow: none;
        }
      }
    
      @media (max-width: 768px) {
        .container {
          flex-direction: column;
        }
        .editor, .preview {
          margin-right: 0;
          margin-bottom: 20px;
        }
      }
    </style>
    </head>
    <body>
      <div class="container">
        <div class="editor">
          <h2>Resume Editor</h2>
          <div class="template-selector">
            <h3>Choose a Template:</h3>
            <img src="template1.jpg" alt="Classic Template" class="template-preview selected" data-template="classic">
            <img src="template2.jpg" alt="Modern Template" class="template-preview" data-template="modern">
            <img src="template3.jpg" alt="Creative Template" class="template-preview" data-template="creative">
          </div>
          <form id="resumeForm" method="GET" action="https://dynamic-resume-builder.websim.ai/update">
            <div id="sectionContainer">
              <div class="section" data-section="personal">
                <div class="drag-handle">+</div>
                <h3>Personal Information</h3>
                <div class="form-group">
                  <label for="name">Full Name:</label>
                  <input type="text" id="name" name="name" required>
                </div>
                <div class="form-group">
                  <label for="title">Professional Title:</label>
                  <input type="text" id="title" name="title" required>
                </div>
                <div class="form-group">
                  <label for="contact">Email</label>
                  <input type="text" id="contact" name="contact" required>
                </div>
              </div>
    
              <div class="section" data-section="summary">
                <div class="drag-handle">+</div>
                <h3>Professional Summary</h3>
                <div class="form-group">
                  <textarea id="summary" name="summary" rows="4" required></textarea>
                </div>
              </div>
    
              <div class="section" data-section="experience">
                <div class="drag-handle">+</div>
                <h3>Work Experience</h3>
                <div class="form-group">
                  <textarea id="experience" name="experience" rows="6" required></textarea>
                </div>
              </div>
    
              <div class="section" data-section="education">
                <div class="drag-handle">+</div>
                <h3>Education</h3>
                <div class="form-group">
                  <textarea id="education" name="education" rows="4" required></textarea>
                </div>
              </div>
    
              <div class="section" data-section="skills">
                <div class="drag-handle">+</div>
                <h3>Skills</h3>
                <div class="form-group">
                  <textarea id="skills" name="skills" rows="4" required></textarea>
                </div>
              </div>
            </div>
    
            <button type="button" id="addSection">Add Custom Section</button>
            <button type="submit">Update Resume</button>
          </form>
        </div>
    
        <div class="preview">
          <h2>Resume Preview</h2>
          <div id="resumePreview">
            <!-- Preview content will be dynamically generated here -->
          </div>
          <button id="printResume" class="no-print">Print Resume</button>
        </div>
      </div>
    
      <script>
        const form = document.getElementById('resumeForm');
        const sectionContainer = document.getElementById('sectionContainer');
        const resumePreview = document.getElementById('resumePreview');
        const addSectionButton = document.getElementById('addSection');
        const templateSelectors = document.querySelectorAll('.template-preview');
        let currentTemplate = 'classic';
        let dragSrcEl = null;
    
        const templates = {
          classic: {
            personal: { top: '0%', left: '0%', width: '100%' },
            summary: { top: '15%', left: '0%', width: '100%' },
            experience: { top: '30%', left: '0%', width: '100%' },
            education: { top: '60%', left: '0%', width: '100%' },
            skills: { top: '80%', left: '0%', width: '100%' }
          },
          modern: {
            personal: { top: '0%', left: '0%', width: '30%' },
            summary: { top: '0%', left: '35%', width: '65%' },
            experience: { top: '20%', left: '35%', width: '65%' },
            education: { top: '50%', left: '35%', width: '65%' },
            skills: { top: '30%', left: '0%', width: '30%' }
          },
          creative: {
            personal: { top: '5%', left: '5%', width: '90%' },
            summary: { top: '25%', left: '5%', width: '90%' },
            experience: { top: '45%', left: '5%', width: '42.5%' },
            education: { top: '45%', left: '52.5%', width: '42.5%' },
            skills: { top: '75%', left: '5%', width: '90%' }
          }
        };
    
        // Initialize drag and drop
        initDragAndDrop();
    
        // Template selection
        templateSelectors.forEach(selector => {
          selector.addEventListener('click', function() {
            templateSelectors.forEach(s => s.classList.remove('selected'));
            this.classList.add('selected');
            currentTemplate = this.dataset.template;
            updatePreview();
          });
        });
    
        // Update preview when form is submitted
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          updatePreview();
        });
    
        // Update preview in real-time as user types
        form.addEventListener('input', updatePreview);
    
        function updatePreview() {
          resumePreview.innerHTML = ''; // Clear previous content
    
          // Generate preview based on form data and current template
          sectionContainer.querySelectorAll('.section').forEach(section => {
            const sectionType = section.dataset.section;
            const sectionTitle = section.querySelector('h3').textContent;
            const sectionContent = Array.from(section.querySelectorAll('input, textarea'))
              .map(input => input.value)
              .filter(value => value.trim() !== '')
              .join('<br>');
    
            if (sectionContent) {
              const previewSection = document.createElement('div');
              previewSection.className = 'preview-section';
              previewSection.innerHTML = `
                <h3>${sectionTitle}</h3>
                <div class="editable" contenteditable="true">${sectionContent}</div>
              `;
              
              // Apply template-specific positioning
              const position = templates[currentTemplate][sectionType] || { top: '0%', left: '0%', width: '100%' };
              Object.assign(previewSection.style, position);
              
              resumePreview.appendChild(previewSection);
            }
          });
        }
    
        // Add custom section
        addSectionButton.addEventListener('click', function() {
          const sectionId = `custom-${Date.now()}`;
          const newSection = document.createElement('div');
          newSection.className = 'section';
          newSection.dataset.section = sectionId;
          newSection.innerHTML = `
            <div class="drag-handle">+</div>
            <h3>Custom Section</h3>
            <div class="form-group">
              <label for="${sectionId}-title">Section Title:</label>
              <input type="text" id="${sectionId}-title" name="${sectionId}-title" required>
            </div>
            <div class="form-group">
              <label for="${sectionId}-content">Section Content:</label>
              <textarea id="${sectionId}-content" name="${sectionId}-content" rows="4" required></textarea>
            </div>
            <button type="button" class="remove-section">Remove Section</button>
          `;
          sectionContainer.appendChild(newSection);
    
          // Add event listener for removing the section
          newSection.querySelector('.remove-section').addEventListener('click', function() {
            sectionContainer.removeChild(newSection);
            updatePreview();
          });
    
          // Update templates object with default position for new section
          Object.values(templates).forEach(template => {
            template[sectionId] = { top: '90%', left: '0%', width: '100%' };
          });
    
          initDragAndDrop();
          updatePreview();
        });
    
        // Print functionality
        document.getElementById('printResume').addEventListener('click', function() {
          window.print();
        });
    
        function initDragAndDrop() {
          const sections = document.querySelectorAll('.section');
          
          sections.forEach(section => {
            section.addEventListener('dragstart', dragStart);
            section.addEventListener('dragover', dragOver);
            section.addEventListener('dragleave', dragLeave);
            section.addEventListener('drop', drop);
            section.addEventListener('dragend', dragEnd);
    
            const handle = section.querySelector('.drag-handle');
            handle.addEventListener('mousedown', function() {
              section.draggable = true;
            });
            handle.addEventListener('mouseup', function() {
              section.draggable = false;
            });
          });
        }
    
        function dragStart(e) {
          this.classList.add('dragging');
          dragSrcEl = this;
          e.dataTransfer.effectAllowed = 'move';
          e.dataTransfer.setData('text/html', this.innerHTML);
        }
    
        function dragOver(e) {
          e.preventDefault();
          e.dataTransfer.dropEffect = 'move';
          this.classList.add('drag-over');
        }
    
        function dragLeave(e) {
          this.classList.remove('drag-over');
        }
    
        function drop(e) {
          e.stopPropagation();
          if (dragSrcEl !== this) {
            dragSrcEl.innerHTML = this.innerHTML;
            this.innerHTML = e.dataTransfer.getData('text/html');
            
            // Swap data-section attributes
            const tempSection = dragSrcEl.dataset.section;
            dragSrcEl.dataset.section = this.dataset.section;
            this.dataset.section = tempSection;
          }
          return false;
        }
    
        function dragEnd(e) {
          this.classList.remove('dragging');
          document.querySelectorAll('.section').forEach(function (section) {
            section.classList.remove('drag-over');
          });
          this.draggable = false;
          updatePreview();
        }
    
        // Initial preview update
        updatePreview();
      </script>
    </body></html>