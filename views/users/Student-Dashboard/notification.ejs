<% layout("/layouts/dashboard-sidebar") %>


 
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
      :root {
        --primary-color: #3a7bd5;
        --secondary-color: #00d2ff;
        --accent-color: #ff6b6b;
        --bg-color: #f8f9fa;
        --text-color: #333333;
        --card-bg: #ffffff;
        --hover-color: #e9ecef;
        --new-tag-color: #28a745;
      }
    
     */
     
    
      .main-content {
        transition: margin-left 0.3s;
        padding: 20px;
      }
    
      @media (max-width: 768px) {
        .sidebar {
          width: 0;
          overflow-x: hidden;
        }
        
        .sidebar.active {
          width: 250px;
        }
    
        .main-content {
          margin-left: 0 !important;
        }
      }
    
      #sidebarCollapse {
        display: none;
      }
    
      @media (max-width: 768px) {
        #sidebarCollapse {
          display: block;
          position: fixed;
          top: 10px;
          left: 10px;
          z-index: 1001;
        }
      }
    
      .profile-picture {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid white;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      }
    
      .notification-card {
        background-color: var(--card-bg);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        transition: all 0.3s;
        position: relative;
      }
    
      .notification-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
      }
    
      .notification-icon {
        font-size: 1.5rem;
        margin-right: 15px;
      }
    
      .notification-time {
        font-size: 0.8rem;
        color: #6c757d;
      }
    
      .notification-actions {
        margin-top: 10px;
      }
    
      .notification-actions .btn {
        margin-right: 10px;
      }
    
      .unread {
        border-left: 4px solid var(--primary-color);
      }
    
      .notification-filter {
        margin-bottom: 20px;
      }
    
      .new-tag {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: var(--new-tag-color);
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: bold;
        animation: pulse 2s infinite;
      }
    
      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }
    </style>
    </head>
    <body>
      <button id="sidebarCollapse" class="btn btn-primary">
        <i class="bi bi-list"></i>
      </button>
    
      <div class="container-fluid">
        <div class="row">
    
          <!-- Main content -->
          <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
              <h1 class="h2">Notifications</h1>
              <div class="btn-toolbar mb-2 mb-md-0">
                <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="markAllRead">
                  <i class="bi bi-check-all me-1"></i>Mark All as Read
                </button>
                <button type="button" class="btn btn-sm btn-outline-danger" id="clearAll">
                  <i class="bi bi-trash me-1"></i>Clear All
                </button>
              </div>
            </div>
    
            <div class="notification-filter">
              <select class="form-select" id="notificationFilter">
                <option value="all">All Notifications</option>
                <option value="unread">Unread</option>
                <option value="new">New</option>
                <option value="courses">Courses</option>
                <option value="assignments">Assignments</option>
                <option value="messages">Messages</option>
              </select>
            </div>
    
            <div id="notificationContainer">
              <!-- Notifications will be dynamically added here -->
            </div>
          </main>
        </div>
      </div>
    
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
      <script>
        // Sidebar toggle functionality
        document.getElementById('sidebarCollapse').addEventListener('click', function() {
          document.getElementById('sidebar').classList.toggle('active');
          document.querySelector('.main-content').classList.toggle('active');
        });
    
        // Sample notifications data
        let notifications = [
          {
            id: 1,
            type: 'courses',
            icon: 'bi-book',
            title: 'New course available',
            message: 'A new course "Advanced JavaScript" is now available.',
            time: '2 hours ago',
            unread: true,
            isNew: true
          },
          {
            id: 2,
            type: 'assignments',
            icon: 'bi-file-text',
            title: 'Assignment due soon',
            message: 'Your "Data Structures" assignment is due in 2 days.',
            time: '1 day ago',
            unread: true,
            isNew: true
          },
          {
            id: 3,
            type: 'messages',
            icon: 'bi-chat-dots',
            title: 'New message from instructor',
            message: 'You have a new message from your Python course instructor.',
            time: '3 days ago',
            unread: false,
            isNew: false
          },
          {
            id: 4,
            type: 'courses',
            icon: 'bi-play-circle',
            title: 'Live session reminder',
            message: 'Don\'t forget about the live coding session today at 3 PM.',
            time: '4 days ago',
            unread: false,
            isNew: false
          }
        ];
    
        function renderNotifications(filter = 'all') {
          const container = document.getElementById('notificationContainer');
          container.innerHTML = '';
    
          const filteredNotifications = notifications.filter(notification => {
            if (filter === 'all') return true;
            if (filter === 'unread') return notification.unread;
            if (filter === 'new') return notification.isNew;
            return notification.type === filter;
          });
    
          filteredNotifications.forEach(notification => {
            const notificationCard = document.createElement('div');
            notificationCard.classList.add('notification-card');
            if (notification.unread) notificationCard.classList.add('unread');
    
            notificationCard.innerHTML = `
              <div class="d-flex align-items-center">
                <i class="bi ${notification.icon} notification-icon"></i>
                <div>
                  <h5 class="mb-0">${notification.title}</h5>
                  <p class="mb-0">${notification.message}</p>
                  <small class="notification-time">${notification.time}</small>
                </div>
              </div>
              <div class="notification-actions">
                <button class="btn btn-sm btn-outline-primary markRead" data-id="${notification.id}">
                  <i class="bi bi-check2"></i> Mark as Read
                </button>
                <button class="btn btn-sm btn-outline-danger deleteNotification" data-id="${notification.id}">
                  <i class="bi bi-trash"></i> Delete
                </button>
              </div>
              ${notification.isNew ? '<span class="new-tag">NEW</span>' : ''}
            `;
    
            container.appendChild(notificationCard);
          });
    
          // Add event listeners to the new buttons
          document.querySelectorAll('.markRead').forEach(button => {
            button.addEventListener('click', function() {
              markAsRead(parseInt(this.getAttribute('data-id')));
            });
          });
    
          document.querySelectorAll('.deleteNotification').forEach(button => {
            button.addEventListener('click', function() {
              deleteNotification(parseInt(this.getAttribute('data-id')));
            });
          });
        }
    
        function markAsRead(id) {
          const notification = notifications.find(n => n.id === id);
          if (notification) {
            notification.unread = false;
            notification.isNew = false;
            renderNotifications(document.getElementById('notificationFilter').value);
          }
        }
    
        function deleteNotification(id) {
          notifications = notifications.filter(n => n.id !== id);
          renderNotifications(document.getElementById('notificationFilter').value);
        }
    
        document.getElementById('markAllRead').addEventListener('click', function() {
          notifications.forEach(notification => {
            notification.unread = false;
            notification.isNew = false;
          });
          renderNotifications(document.getElementById('notificationFilter').value);
        });
    
        document.getElementById('clearAll').addEventListener('click', function() {
          notifications = [];
          renderNotifications();
        });
    
        document.getElementById('notificationFilter').addEventListener('change', function() {
          renderNotifications(this.value);
        });
    
        // Function to add a new notification
        function addNewNotification(notification) {
          notification.id = notifications.length > 0 ? Math.max(...notifications.map(n => n.id)) + 1 : 1;
          notification.isNew = true;
          notification.unread = true;
          notifications.unshift(notification);
          renderNotifications(document.getElementById('notificationFilter').value);
        }
    
        // Example of adding a new notification (you can call this function when a new notification arrives)
        setTimeout(() => {
          addNewNotification({
            type: 'assignments',
            icon: 'bi-lightbulb',
            title: 'New Study Tip',
            message: 'Check out our latest study tip for effective learning strategies!',
            time: 'Just now'
          });
        }, 5000);
    
        // Initial render
        renderNotifications();
      </script>
    </body></html>