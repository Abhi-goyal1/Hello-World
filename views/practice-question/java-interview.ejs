<% layout("/layouts/boilerplate") %>


<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
    
    /* body {
       
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
    } */
    
   #questions h2{
    font-family: 'Roboto', sans-serif;
    font-weight: 600;
    padding: 20px;
    position: relative;
   }
   #questions h2 span{
    color: #2baffc;
   }
   #questions h2::after {
    content: '';
    display: block;
    width: 400px;
    height: 3px;
    background: #000;
    margin: 10px auto 0;
    border-radius: 20px;
}
   
    
    .question-section, .download-section {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;
        margin-bottom: 30px;
    }
    
    .question {
        font-size: 1.1rem;
        font-weight: 600;
        /* color: #2c3e50; */
        cursor: pointer;
        transition: color 0.3s ease;
    }
    
    .question:hover, .question.active {
        color: #2baffc;
    }
    
    .question i {
        transition: transform 0.3s ease;
    }
    
    .question.active i {
        transform: rotate(180deg);
    }
    
    .answer {
        font-size: 1rem;
        color: #34495e;
        border-left: 3px solid #2baffc;
        display: none;
        text-align: justify;
    }
    
    pre {
        background-color: #f8f8f8;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        overflow-x: auto;
        font-family: 'Courier New', Courier, monospace;
        font-size: 0.9rem;
    }
    
    .download-section {
        
        
    background: rgb(43,175,252);
background: radial-gradient(circle, rgba(43,175,252,1) 1%, rgba(255,255,255,1) 100%, rgba(255,255,255,1) 100%);
        /* color: #fff; */
        padding: 40px;
        font-weight: 600;
        text-align: center;
    }
    .download-section h1 {
        color: white;
        font-weight: 700;
        font-family: 'Roboto', sans-serif;
    }
    
    .download-btn-container {
        perspective: 1000px;
    }
    
    .download-btn {
        background-color: #fff;
        color: #3498db;
        transition: all 0.3s ease;
        transform-style: preserve-3d;
        position: relative;
        display: inline-block;
        padding: 12px 36px;
        margin: 20px 0;
        text-decoration: none;
        font-size: 18px;
        font-weight: bold;
        letter-spacing: 2px;
        border-radius: 50px;
        overflow: hidden;
        text-transform: uppercase;
    }
    
    .download-btn:before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(120deg, transparent, rgba(255, 255, 255, .3), transparent);
        transition: all 0.6s;
    }
    
    .download-btn:hover:before {
        left: 100%;
    }
    
    .download-btn:hover {
        transform: rotateY(15deg);
        box-shadow: -15px 15px 20px rgba(0, 0, 0, 0.2);
        background-color: #ecf0f1;
        color: #2980b9;
    }
    
    .download-btn i {
        margin-right: 10px;
        transition: transform 0.3s ease;
    }
    
    .download-btn:hover i {
        transform: translateY(-3px);
    }
    
    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(255, 255, 255, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
        }
    }
    
    .download-btn:focus {
        animation: pulse 1.5s infinite;
    }
    
   
    
    .hero p {
        text-align: justify;
    }
    
    @media (max-width: 768px) {
        .hero h1 {
            font-size: 2rem;
        }
        
        .hero p {
            font-size: 1rem;
        }
        #questions h2::after {
   display: none;
}
    }
    </style>
    </head>
    <body>
       
    
     
    
        <main class="container my-5">
            <section id="questions" class="question-section p-4">
                <h2 class="text-center mb-4">Top 100 <span>Java Interview</span> Questions/Answers</h2>
                <div id="questionList">
                    <!-- Questions will be dynamically inserted here -->
                </div>
            </section>
    
            <section id="download" class="download-section">
                <h1 class="mb-4">Download In Pdf Formate!</h1>
                <p>Create a hello world account and get all these questions and answers in a convenient PDF format. Perfect for offline studying or quick reference!</p>
                <div class="download-btn-container">
                    <a href="#" class="download-btn" onclick="generatePDF()">
                        <i class="fas fa-file-download"></i>Download PDF
                    </a>
                </div>
            </section>
        </main>
    
    
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const questions = [
                {
                    question: "1. HTML: How do you create a hyperlink in HTML?",
                    answer: "To create a hyperlink in HTML, you use the <a> tag with the href attribute. This fundamental element of web design allows you to connect different pages or resources, creating an interactive and navigable web experience. Here's an example of how to implement a basic hyperlink:\n\n<pre><code>&lt;a href=\"https://www.example.com\"&gt;Visit Example.com&lt;/a&gt;</code></pre>\n\nIn this code snippet, \"https://www.example.com\" is the destination URL, and \"Visit Example.com\" is the clickable text that will be displayed to the user. When a visitor clicks on this link, their browser will navigate to the specified URL. Remember to always use full URLs (including the 'http://' or 'https://') for external links to ensure proper functionality across different browsing environments."
                },
                {
                    question: "2. CSS: How do you center an element horizontally and vertically using Flexbox?",
                    answer: "Centering elements both horizontally and vertically is a common layout challenge that Flexbox solves elegantly. Flexbox, or the Flexible Box Layout module, provides a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown or dynamic. Here's how you can use Flexbox to center an element both horizontally and vertically:\n\n<pre><code>.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh; /* Assuming you want to center in the viewport */\n}\n\n.child {\n    /* Your styles for the child element */\n}</code></pre>\n\nIn this CSS, we first set the parent container to use flexbox with 'display: flex'. Then, 'justify-content: center' aligns the flex items along the main axis (horizontally in this case), while 'align-items: center' aligns them along the cross axis (vertically). The 'height: 100vh' ensures the parent takes up the full viewport height, allowing vertical centering relative to the screen. This method is particularly useful for creating centered layouts for both single elements and groups of elements."
                },
                {
                    question: "3. Java: What is the difference between '==' and '.equals()' when comparing strings in Java?",
                    answer: "Understanding the distinction between '==' and '.equals()' for string comparison in Java is crucial for writing correct and efficient code. These two comparison methods serve different purposes and can lead to unexpected results if used incorrectly. Here's a detailed explanation:\n\n<pre><code>String str1 = new String(\"Hello\");\nString str2 = new String(\"Hello\");\n\nSystem.out.println(str1 == str2);        // false\nSystem.out.println(str1.equals(str2));   // true</code></pre>\n\nThe '==' operator compares object references, checking if two variables point to the exact same object in memory. For strings, this means it will only return true if both variables reference the same String object, not just the same sequence of characters.\n\nOn the other hand, the '.equals()' method compares the actual content of the strings. It checks whether the sequences of characters in both strings are identical, regardless of whether they are separate objects in memory.\n\nIn the example above, 'str1 == str2' returns false because 'new String()' creates distinct objects, even with the same content. However, 'str1.equals(str2)' returns true because the character sequences are identical.\n\nIt's generally recommended to use '.equals()' for string comparison in Java to ensure you're comparing the content rather than the object references. This practice helps avoid subtle bugs and makes your code more intuitive and reliable when working with strings."
                },
                {
                    question: "4. HTML: What is the purpose of the 'alt' attribute in an <img> tag?",
                    answer: "The 'alt' attribute in an <img> tag is a crucial element for web accessibility, SEO, and user experience. It provides alternative text for an image, serving multiple important purposes in web development:\n\n1. Accessibility: Screen readers use the alt text to describe images to visually impaired users, making your content more inclusive and accessible to a wider audience.\n\n2. SEO (Search Engine Optimization): Search engines use alt text to understand the content of images, which can improve your site's search rankings for relevant image searches.\n\n3. Fallback Display: If an image fails to load due to slow internet connections or broken links, the alt text is displayed in place of the image, ensuring that users still receive some context about the missing visual content.\n\nHere's an example of how to use the alt attribute:\n\n<pre><code>&lt;img src=\"cat.jpg\" alt=\"A cute orange tabby cat lounging in a sunny window\"&gt;</code></pre>\n\nWhen writing alt text, aim to be descriptive yet concise. Convey the key information or purpose of the image without being overly verbose. For decorative images that don't convey important information, you can use an empty alt attribute (alt=\"\") to indicate that the image can be safely ignored by screen readers. Remember, effective use of alt text enhances both the accessibility and overall quality of your web content."
                },
                {
                    question: "5. CSS: How do you create a responsive grid layout using CSS Grid?",
                    answer: "CSS Grid is a powerful layout system that allows for the creation of complex, responsive layouts with ease. It provides a two-dimensional grid-based layout system, optimized for user interface design. Here's how you can create a responsive grid layout using CSS Grid:\n\n<pre><code>.grid-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n}\n\n.grid-item {\n    /* Styles for grid items */\n}</code></pre>\n\nLet's break down this code:\n\n1. 'display: grid' establishes a grid context for the container's direct children.\n\n2. 'grid-template-columns: repeat(auto-fit, minmax(200px, 1fr))' is the key to responsiveness:\n   - 'repeat' function creates multiple columns.\n   - 'auto-fit' keyword allows the grid to automatically adjust the number of columns based on available space.\n   - 'minmax(200px, 1fr)' sets each column to be at least 200px wide, but allows them to grow equally to fill available space.\n\n3. 'gap: 20px' adds space between grid items, both horizontally and vertically.\n\nThis setup creates a grid where columns automatically adjust based on the container's width. On wider screens, you'll see multiple columns, while on narrower screens, the columns will stack vertically. The minimum width of 200px ensures that the content remains readable on smaller devices.\n\nBy leveraging CSS Grid in this way, you can create flexible, responsive layouts that adapt seamlessly to various screen sizes without the need for media queries. This approach is particularly useful for image galleries, card layouts, or any design that requires a uniform grid of elements."
                },
                {
                    question: "1. HTML: How do you create a hyperlink in HTML?",
                    answer: "To create a hyperlink in HTML, you use the <a> tag with the href attribute. This fundamental element of web design allows you to connect different pages or resources, creating an interactive and navigable web experience. Here's an example of how to implement a basic hyperlink:\n\n<pre><code>&lt;a href=\"https://www.example.com\"&gt;Visit Example.com&lt;/a&gt;</code></pre>\n\nIn this code snippet, \"https://www.example.com\" is the destination URL, and \"Visit Example.com\" is the clickable text that will be displayed to the user. When a visitor clicks on this link, their browser will navigate to the specified URL. Remember to always use full URLs (including the 'http://' or 'https://') for external links to ensure proper functionality across different browsing environments."
                },
                {
                    question: "2. CSS: How do you center an element horizontally and vertically using Flexbox?",
                    answer: "Centering elements both horizontally and vertically is a common layout challenge that Flexbox solves elegantly. Flexbox, or the Flexible Box Layout module, provides a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown or dynamic. Here's how you can use Flexbox to center an element both horizontally and vertically:\n\n<pre><code>.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh; /* Assuming you want to center in the viewport */\n}\n\n.child {\n    /* Your styles for the child element */\n}</code></pre>\n\nIn this CSS, we first set the parent container to use flexbox with 'display: flex'. Then, 'justify-content: center' aligns the flex items along the main axis (horizontally in this case), while 'align-items: center' aligns them along the cross axis (vertically). The 'height: 100vh' ensures the parent takes up the full viewport height, allowing vertical centering relative to the screen. This method is particularly useful for creating centered layouts for both single elements and groups of elements."
                },
                {
                    question: "3. Java: What is the difference between '==' and '.equals()' when comparing strings in Java?",
                    answer: "Understanding the distinction between '==' and '.equals()' for string comparison in Java is crucial for writing correct and efficient code. These two comparison methods serve different purposes and can lead to unexpected results if used incorrectly. Here's a detailed explanation:\n\n<pre><code>String str1 = new String(\"Hello\");\nString str2 = new String(\"Hello\");\n\nSystem.out.println(str1 == str2);        // false\nSystem.out.println(str1.equals(str2));   // true</code></pre>\n\nThe '==' operator compares object references, checking if two variables point to the exact same object in memory. For strings, this means it will only return true if both variables reference the same String object, not just the same sequence of characters.\n\nOn the other hand, the '.equals()' method compares the actual content of the strings. It checks whether the sequences of characters in both strings are identical, regardless of whether they are separate objects in memory.\n\nIn the example above, 'str1 == str2' returns false because 'new String()' creates distinct objects, even with the same content. However, 'str1.equals(str2)' returns true because the character sequences are identical.\n\nIt's generally recommended to use '.equals()' for string comparison in Java to ensure you're comparing the content rather than the object references. This practice helps avoid subtle bugs and makes your code more intuitive and reliable when working with strings."
                },
                {
                    question: "4. HTML: What is the purpose of the 'alt' attribute in an <img> tag?",
                    answer: "The 'alt' attribute in an <img> tag is a crucial element for web accessibility, SEO, and user experience. It provides alternative text for an image, serving multiple important purposes in web development:\n\n1. Accessibility: Screen readers use the alt text to describe images to visually impaired users, making your content more inclusive and accessible to a wider audience.\n\n2. SEO (Search Engine Optimization): Search engines use alt text to understand the content of images, which can improve your site's search rankings for relevant image searches.\n\n3. Fallback Display: If an image fails to load due to slow internet connections or broken links, the alt text is displayed in place of the image, ensuring that users still receive some context about the missing visual content.\n\nHere's an example of how to use the alt attribute:\n\n<pre><code>&lt;img src=\"cat.jpg\" alt=\"A cute orange tabby cat lounging in a sunny window\"&gt;</code></pre>\n\nWhen writing alt text, aim to be descriptive yet concise. Convey the key information or purpose of the image without being overly verbose. For decorative images that don't convey important information, you can use an empty alt attribute (alt=\"\") to indicate that the image can be safely ignored by screen readers. Remember, effective use of alt text enhances both the accessibility and overall quality of your web content."
                },
                {
                    question: "5. CSS: How do you create a responsive grid layout using CSS Grid?",
                    answer: "CSS Grid is a powerful layout system that allows for the creation of complex, responsive layouts with ease. It provides a two-dimensional grid-based layout system, optimized for user interface design. Here's how you can create a responsive grid layout using CSS Grid:\n\n<pre><code>.grid-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n}\n\n.grid-item {\n    /* Styles for grid items */\n}</code></pre>\n\nLet's break down this code:\n\n1. 'display: grid' establishes a grid context for the container's direct children.\n\n2. 'grid-template-columns: repeat(auto-fit, minmax(200px, 1fr))' is the key to responsiveness:\n   - 'repeat' function creates multiple columns.\n   - 'auto-fit' keyword allows the grid to automatically adjust the number of columns based on available space.\n   - 'minmax(200px, 1fr)' sets each column to be at least 200px wide, but allows them to grow equally to fill available space.\n\n3. 'gap: 20px' adds space between grid items, both horizontally and vertically.\n\nThis setup creates a grid where columns automatically adjust based on the container's width. On wider screens, you'll see multiple columns, while on narrower screens, the columns will stack vertically. The minimum width of 200px ensures that the content remains readable on smaller devices.\n\nBy leveraging CSS Grid in this way, you can create flexible, responsive layouts that adapt seamlessly to various screen sizes without the need for media queries. This approach is particularly useful for image galleries, card layouts, or any design that requires a uniform grid of elements."
                },
                {
                    question: "6. Java: Explain the concept of inheritance in Java with an example.",
                    answer: "Inheritance is a fundamental concept in object-oriented programming (OOP) and a key feature of Java. It allows a class to inherit properties and methods from another class, promoting code reusability and establishing a relationship between classes. This mechanism enables the creation of a hierarchical classification, where a derived class (subclass) can inherit attributes and behaviors from a base class (superclass).\n\nHere's an example to illustrate inheritance in Java:\n\n<pre><code>class Animal {\n    void eat() {\n        System.out.println(\"This animal eats food\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"The dog barks\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog myDog = new Dog();\n        myDog.eat();  // Inherited method\n        myDog.bark(); // Dog's own method\n    }\n}</code></pre>\n\nIn this example:\n\n1. We have a base class 'Animal' with a method 'eat()'.\n2. The 'Dog' class extends 'Animal' using the 'extends' keyword, inheriting all non-private members from 'Animal'.\n3. 'Dog' adds its own method 'bark()'.\n4. In the 'Main' class, we create a 'Dog' object and can call both the inherited 'eat()' method and its own 'bark()' method.\n\nKey points about inheritance in Java:\n\n- It supports single inheritance for classes (a class can only extend one class) but multiple inheritance for interfaces.\n- The 'super' keyword can be used to call the superclass constructor or methods.\n- Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass.\n- The 'final' keyword can prevent a class from being inherited or a method from being overridden.\n\nInheritance promotes the 'is-a' relationship (e.g., a Dog is an Animal) and helps in creating more maintainable and organized code by reducing redundancy and improving code structure."
                }
            ];
    
            const questionList = document.getElementById('questionList');
    
            questions.forEach((q, index) => {
                const questionDiv = document.createElement('div');
                questionDiv.innerHTML = `
                    <div class="question mb-3" onclick="toggleAnswer(${index})">
                        <div class="d-flex justify-content-between align-items-center">
                            <span>${q.question}</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="answer ps-3 mb-4" id="answer${index}">${q.answer}</div>
                `;
                questionList.appendChild(questionDiv);
            });
    
            window.toggleAnswer = function(index) {
                const answer = document.getElementById(`answer${index}`);
                const question = answer.previousElementSibling;
                answer.style.display = answer.style.display === 'none' || answer.style.display === '' ? 'block' : 'none';
                // question.classList.toggle('active');
            }
    
            window.generatePDF = function() {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                let yOffset = 10;
    
                doc.setFontSize(20);
                doc.text("Top Coding Questions: HTML, CSS, Java", 20, yOffset);
                yOffset += 10;
    
                doc.setFontSize(12);
                questions.forEach((q, index) => {
                    if (yOffset > 280) {
                        doc.addPage();
                        yOffset = 10;
                    }
                    doc.setFont(undefined, 'bold');
                    doc.text(`${index + 1}. ${q.question}`, 10, yOffset);
                    yOffset += 10;
                    doc.setFont(undefined, 'normal');
                    const lines = doc.splitTextToSize(q.answer.replace(/<\/?[^>]+(>|$)/g, ""), 180);
                    doc.text(lines, 10, yOffset);
                    yOffset += lines.length * 5 + 10;
                });
    
                doc.save("top_coding_questions.pdf");
            }
        });
        </script>